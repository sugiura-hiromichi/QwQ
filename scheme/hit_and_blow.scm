(import (scheme base) (scheme write) (scheme time) (scheme small))

(define (irand low high seed)
	(if (> low high)
		(let ((tmp low))
			(set! low high)
			(set! high tmp)
		))
	(let ((cur (current-second)) (range (- high low (- 1))))
		(+ low (modulo (exact (floor (* seed (exp (* seed (- cur (floor cur))))))) range))))

(define (random-list)
	(define (rli n)
		(let ((rd (irand 0 9 n)))
			(if (eqv? n 0)
				'()
				(cons (irand 0 9 (+ 10 rd)) (rli (- n 1))))))
	(rli 4))

(define answer (random-list))


(define n 0)
(define (update ans)
	(set! n (+ n 1))
	(display n)
	(let ((pl_expect (cin)))
		(if (check pl_expect ans)
			(display "0w0")
			(update ans))))

(define (cin)
	(define (i n)
		(if (eqv? 0 n)
			'()
			(let ((inp (read)))
				(cons inp (i (- n 1))))))
	(i 4))

(define (check expect ans)
	(let ((blow (blows expect ans)) (hit (hits expect ans)))
		(define (when_correct) (display "hits 4 blows 0") t)
		(define (or_else)
			(display "hits ") (display hit) (display " blows ") (display blow)
			#f
		)
		(if (eqv? hit 4)
			(when_correct)
			(or_else)
		)
	)
)

(define (blows expect ans)
	(define (extract expect)

	)
	(define l '())
	(define (bli expect ans idx)
		(if (eqv? 3 idx)

		)
	)
)
